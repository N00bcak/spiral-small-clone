from typing import Optional, Callable
from textarena.agents import HFLocalAgent

class HFLocalAgentWithTemplate(HFLocalAgent):
    """
    TextArena's HFLocalAgent does not support custom templates, so this class
    extends the functionality to allow for OUR style of templates.

    Pre-empts 'distributional shift' issues on HF agents to-be-evaluated,
    especially other models post-trained via SPIRAL.
    """
    def __init__(self, model_name, template: Callable[[str, Optional[str]], str], system_prompt = "", *args, **kwargs):
        super().__init__(model_name, *args, **kwargs)
        self.template = template
        self.system_prompt = system_prompt

    def __call__(self, observation: str) -> str:
        """
        Process the observation using the Hugging Face model and return the action.
        
        Args:
            observation (str): The input string to process.
        
        Returns:
            str: The response generated by the model.
        """
        try: # Generate a response
            formatted_obs = self.template(observation, system_prompt = self.system_prompt)
            response = self.pipeline(formatted_obs, num_return_sequences=1, return_full_text=False)
            action = response[0]['generated_text'].strip() # Extract and return the text output
            return action
        except Exception as e:
            return f"An error occurred: {e}"
    
# class LocalAgent(Agent):
#     '''
#     Uses vLLM 
#     '''